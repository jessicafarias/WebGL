{"version":3,"sources":["../../../../../usr/local/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","src/sketch.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","value","x","copy","global","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","Math","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","pixelRatio","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","aspect","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","context","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","animate","_resizeHandler","resize","render","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","time","fps","_computeCurrentFrame","_getSizeProps","viewportWidth","viewportHeight","dispose","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","canvasSketch","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","renderer","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","EPSILON","pow","isInteger","sign","Function","defineProperty","index","nextKey","runtime","undefined$1","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","reverse","skipTempReset","prev","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","asyncGeneratorStep","gen","_next","_throw","_defineProperties","descriptor","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","_assertThisInitialized","ReferenceError","_arrayLikeToArray","arr","arr2","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_unsupportedIterableToArray","bind","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","event","array","_lut","_canvas","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","damp","lambda","dt","exp","pingpong","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","Vector2","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","matrix","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","DEFAULT_IMAGE","DEFAULT_MAPPING","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","serializeImage","HTMLImageElement","ImageBitmap","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","images","url","isDataTexture","transformUv","uv","Vector4","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","WebGLRenderTarget","_EventDispatcher","options","_this","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setSize","WebGLMultisampleRenderTarget","_WebGLRenderTarget","samples","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","count","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","v0","extents","j","_testAxis","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","isVector3","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","Euler","DefaultOrder","asin","setFromQuaternion","_matrix","setFromVector3","reorder","newOrder","_quaternion$1","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","_i","_l","_i2","_i3","extractFromCache","_shapes","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","isColor","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","color","components","parseInt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","Face3","materialIndex","vertexNormals","vertexColors","_il","materialId","Material","fog","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","_data","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isFloat16BufferAttribute","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","_il2","_morphAttribute","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","group","handleTriangle","tmp2","n2","_i4","_il3","_group","_start","_j","_jl","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","_i5","_il4","_i6","_il5","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","_name","morphArray","morphAttribute","_newAttribute","_i7","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute2","_attributeData","_name2","_i8","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkBufferGeometryIntersection","raycaster","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","checkIntersection","face","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","_a","_b","_c","_groupMaterial","isGeometry","BoxGeometry","_BufferGeometry","depth","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","isMatrix3","isMatrix4","isVector2","isVector4","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","DataTexture","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_attribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","has","currentRenderList","getRenderList","setRenderList","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","DataTexture2DArray","wrapR","DataTexture3D","physical","transmission","transmissionMap","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","isWebGLRenderTarget","getParameters","shadows","isMeshStandardMaterial","environment","bones","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","_uniforms5","_uniforms6","_uniforms7","_uniforms8","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderCallDepth","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","isWebGLMultisampleRenderTarget","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onInputSourcesChange","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","_ref","_callee","baseLayer","_context","getContextAttributes","xrCompatible","makeXRCompatible","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","args","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","display","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderState","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","_geometry","_material","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","joints","inputState","pinching","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","_step","_iterator","inputjoint","jointPose","getJointPose","jointName","_joint","joint","jointRadius","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","FogExp2","Fog","Scene","_Object3D","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$7","_matrix$1","SkinnedMesh","bindMatrixInverse","Bone","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","_bone","getBoneByName","fromJSON","json","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_distance","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","CompressedTexture","CanvasTexture","DepthTexture","readyState","HAVE_CURRENT_DATA","isCanvasTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","ConeGeometry","_CylinderGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","DodecahedronGeometry","_PolyhedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","hl","ahole","_h","_hl","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","_i9","_i10","_face","_i11","_face2","_i12","_face3","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","_base","OctahedronGeometry","ParametricGeometry","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_l2","_l3","_toJSON$1","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","_ExtrudeGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateIndices","generateBufferData","WireframeGeometry","edge","edges","ol","edge1","edge2","Geometries","freeze","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","_startIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","ImageLoader","CubeTextureLoader","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","onImageError","urls","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","_Loader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","child","geometryShapes","bufferGeometryLoader","details","deserializeImage","loadImage","deserializedImage","_deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","isImageBitmapLoader","setOptions","fetchOptions","credentials","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$8","Box2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$9","SpotLightHelper","cone","coneLength","coneWidth","_vector$a","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$b","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$c","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_Line","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","log2","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","ClosedSplineCurve3","SplineCurve3","Spline","construct","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","materialIndexOffset","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","__THREE__","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","amd","globalThis","THREE","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","_domElementKeyEvents","getPolarAngle","spherical","getAzimuthalAngle","listenToKeyEvents","onKeyDown","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","controls","texture_moon","material_moon","mesh_moon","[object Object]","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\tif (Number.EPSILON === undefined) {\n\t\tNumber.EPSILON = Math.pow(2, -52);\n\t}\n\n\tif (Number.isInteger === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\t\tNumber.isInteger = function (value) {\n\t\t\treturn typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\t} //\n\n\n\tif (Math.sign === undefined) {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\tMath.sign = function (x) {\n\t\t\treturn x < 0 ? -1 : x > 0 ? 1 : +x;\n\t\t};\n\t}\n\n\tif ('name' in Function.prototype === false) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\tObject.defineProperty(Function.prototype, 'name', {\n\t\t\tget: function get() {\n\t\t\t\treturn this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n\t\t\t}\n\t\t});\n\t}\n\n\tif (Object.assign === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\tObject.assign = function (target) {\n\n\t\t\tif (target === undefined || target === null) {\n\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t}\n\n\t\t\tvar output = Object(target);\n\n\t\t\tfor (var index = 1; index < arguments.length; index++) {\n\t\t\t\tvar source = arguments[index];\n\n\t\t\t\tif (source !== undefined && source !== null) {\n\t\t\t\t\tfor (var nextKey in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t\t\t\t\t\toutput[nextKey] = source[nextKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\t}\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\tvar runtime = function (exports) {\n\n\t\tvar Op = Object.prototype;\n\t\tvar hasOwn = Op.hasOwnProperty;\n\t\tvar undefined$1; // More compressible than void 0.\n\n\t\tvar $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t\tvar iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t\tvar asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t\tvar toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n\t\tfunction define(obj, key, value) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tvalue: value,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t\treturn obj[key];\n\t\t}\n\n\t\ttry {\n\t\t\t// IE 8 has a broken Object.defineProperty that only works on DOM objects.\n\t\t\tdefine({}, \"\");\n\t\t} catch (err) {\n\t\t\tdefine = function define(obj, key, value) {\n\t\t\t\treturn obj[key] = value;\n\t\t\t};\n\t\t}\n\n\t\tfunction wrap(innerFn, outerFn, self, tryLocsList) {\n\t\t\t// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t\t\tvar protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t\t\tvar generator = Object.create(protoGenerator.prototype);\n\t\t\tvar context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n\t\t\t// .throw, and .return methods.\n\n\t\t\tgenerator._invoke = makeInvokeMethod(innerFn, self, context);\n\t\t\treturn generator;\n\t\t}\n\n\t\texports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n\t\t// record like context.tryEntries[i].completion. This interface could\n\t\t// have been (and was previously) designed to take a closure to be\n\t\t// invoked without arguments, but in all the cases we care about we\n\t\t// already have an existing method we want to call, so there's no need\n\t\t// to create a new function object. We can even get away with assuming\n\t\t// the method takes exactly one argument, since that happens to be true\n\t\t// in every case, so we don't have to touch the arguments object. The\n\t\t// only additional allocation required is the completion record, which\n\t\t// has a stable shape and so hopefully should be cheap to allocate.\n\n\t\tfunction tryCatch(fn, obj, arg) {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"normal\",\n\t\t\t\t\targ: fn.call(obj, arg)\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"throw\",\n\t\t\t\t\targ: err\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tvar GenStateSuspendedStart = \"suspendedStart\";\n\t\tvar GenStateSuspendedYield = \"suspendedYield\";\n\t\tvar GenStateExecuting = \"executing\";\n\t\tvar GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n\t\t// breaking out of the dispatch switch statement.\n\n\t\tvar ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n\t\t// .constructor.prototype properties for functions that return Generator\n\t\t// objects. For full spec compliance, you may wish to configure your\n\t\t// minifier not to mangle the names of these two functions.\n\n\t\tfunction Generator() {}\n\n\t\tfunction GeneratorFunction() {}\n\n\t\tfunction GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n\t\t// don't natively support it.\n\n\n\t\tvar IteratorPrototype = {};\n\n\t\tIteratorPrototype[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tvar getProto = Object.getPrototypeOf;\n\t\tvar NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n\t\tif (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t\t\t// This environment has a native %IteratorPrototype%; use it instead\n\t\t\t// of the polyfill.\n\t\t\tIteratorPrototype = NativeIteratorPrototype;\n\t\t}\n\n\t\tvar Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\t\tGeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t\tGeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t\tGeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n\t\t// Iterator interface in terms of a single ._invoke method.\n\n\t\tfunction defineIteratorMethods(prototype) {\n\t\t\t[\"next\", \"throw\", \"return\"].forEach(function (method) {\n\t\t\t\tdefine(prototype, method, function (arg) {\n\t\t\t\t\treturn this._invoke(method, arg);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\texports.isGeneratorFunction = function (genFun) {\n\t\t\tvar ctor = typeof genFun === \"function\" && genFun.constructor;\n\t\t\treturn ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n\t\t\t// do is to check its .name property.\n\t\t\t(ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n\t\t};\n\n\t\texports.mark = function (genFun) {\n\t\t\tif (Object.setPrototypeOf) {\n\t\t\t\tObject.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t\t\t} else {\n\t\t\t\tgenFun.__proto__ = GeneratorFunctionPrototype;\n\t\t\t\tdefine(genFun, toStringTagSymbol, \"GeneratorFunction\");\n\t\t\t}\n\n\t\t\tgenFun.prototype = Object.create(Gp);\n\t\t\treturn genFun;\n\t\t}; // Within the body of any async function, `await x` is transformed to\n\t\t// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t\t// `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t\t// meant to be awaited.\n\n\n\t\texports.awrap = function (arg) {\n\t\t\treturn {\n\t\t\t\t__await: arg\n\t\t\t};\n\t\t};\n\n\t\tfunction AsyncIterator(generator, PromiseImpl) {\n\t\t\tfunction invoke(method, arg, resolve, reject) {\n\t\t\t\tvar record = tryCatch(generator[method], generator, arg);\n\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\treject(record.arg);\n\t\t\t\t} else {\n\t\t\t\t\tvar result = record.arg;\n\t\t\t\t\tvar value = result.value;\n\n\t\t\t\t\tif (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n\t\t\t\t\t\treturn PromiseImpl.resolve(value.__await).then(function (value) {\n\t\t\t\t\t\t\tinvoke(\"next\", value, resolve, reject);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tinvoke(\"throw\", err, resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn PromiseImpl.resolve(value).then(function (unwrapped) {\n\t\t\t\t\t\t// When a yielded Promise is resolved, its final value becomes\n\t\t\t\t\t\t// the .value of the Promise<{value,done}> result for the\n\t\t\t\t\t\t// current iteration.\n\t\t\t\t\t\tresult.value = unwrapped;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}, function (error) {\n\t\t\t\t\t\t// If a rejected Promise was yielded, throw the rejection back\n\t\t\t\t\t\t// into the async generator function so it can be handled there.\n\t\t\t\t\t\treturn invoke(\"throw\", error, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar previousPromise;\n\n\t\t\tfunction enqueue(method, arg) {\n\t\t\t\tfunction callInvokeWithMethodAndArg() {\n\t\t\t\t\treturn new PromiseImpl(function (resolve, reject) {\n\t\t\t\t\t\tinvoke(method, arg, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn previousPromise = // If enqueue has been called before, then we want to wait until\n\t\t\t\t// all previous Promises have been resolved before calling invoke,\n\t\t\t\t// so that results are always delivered in the correct order. If\n\t\t\t\t// enqueue has not been called before, then it is important to\n\t\t\t\t// call invoke immediately, without waiting on a callback to fire,\n\t\t\t\t// so that the async generator function has the opportunity to do\n\t\t\t\t// any necessary setup in a predictable way. This predictability\n\t\t\t\t// is why the Promise constructor synchronously invokes its\n\t\t\t\t// executor callback, and why async functions synchronously\n\t\t\t\t// execute code before the first await. Since we implement simple\n\t\t\t\t// async functions in terms of async generators, it is especially\n\t\t\t\t// important to get this right, even though it requires care.\n\t\t\t\tpreviousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n\t\t\t\t// invocations of the iterator.\n\t\t\t\tcallInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n\t\t\t} // Define the unified helper method that is used to implement .next,\n\t\t\t// .throw, and .return (see defineIteratorMethods).\n\n\n\t\t\tthis._invoke = enqueue;\n\t\t}\n\n\t\tdefineIteratorMethods(AsyncIterator.prototype);\n\n\t\tAsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\texports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n\t\t// AsyncIterator objects; they just return a Promise for the value of\n\t\t// the final result produced by the iterator.\n\n\t\texports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n\t\t\tif (PromiseImpl === void 0) PromiseImpl = Promise;\n\t\t\tvar iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n\t\t\treturn exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n\t\t\t: iter.next().then(function (result) {\n\t\t\t\treturn result.done ? result.value : iter.next();\n\t\t\t});\n\t\t};\n\n\t\tfunction makeInvokeMethod(innerFn, self, context) {\n\t\t\tvar state = GenStateSuspendedStart;\n\t\t\treturn function invoke(method, arg) {\n\t\t\t\tif (state === GenStateExecuting) {\n\t\t\t\t\tthrow new Error(\"Generator is already running\");\n\t\t\t\t}\n\n\t\t\t\tif (state === GenStateCompleted) {\n\t\t\t\t\tif (method === \"throw\") {\n\t\t\t\t\t\tthrow arg;\n\t\t\t\t\t} // Be forgiving, per 25.3.3.3.3 of the spec:\n\t\t\t\t\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n\t\t\t\t\treturn doneResult();\n\t\t\t\t}\n\n\t\t\t\tcontext.method = method;\n\t\t\t\tcontext.arg = arg;\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar delegate = context.delegate;\n\n\t\t\t\t\tif (delegate) {\n\t\t\t\t\t\tvar delegateResult = maybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (delegateResult) {\n\t\t\t\t\t\t\tif (delegateResult === ContinueSentinel) continue;\n\t\t\t\t\t\t\treturn delegateResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.method === \"next\") {\n\t\t\t\t\t\t// Setting context._sent for legacy support of Babel's\n\t\t\t\t\t\t// function.sent implementation.\n\t\t\t\t\t\tcontext.sent = context._sent = context.arg;\n\t\t\t\t\t} else if (context.method === \"throw\") {\n\t\t\t\t\t\tif (state === GenStateSuspendedStart) {\n\t\t\t\t\t\t\tstate = GenStateCompleted;\n\t\t\t\t\t\t\tthrow context.arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontext.dispatchException(context.arg);\n\t\t\t\t\t} else if (context.method === \"return\") {\n\t\t\t\t\t\tcontext.abrupt(\"return\", context.arg);\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = GenStateExecuting;\n\t\t\t\t\tvar record = tryCatch(innerFn, self, context);\n\n\t\t\t\t\tif (record.type === \"normal\") {\n\t\t\t\t\t\t// If an exception is thrown from innerFn, we leave state ===\n\t\t\t\t\t\t// GenStateExecuting and loop back for another invocation.\n\t\t\t\t\t\tstate = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n\t\t\t\t\t\tif (record.arg === ContinueSentinel) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: record.arg,\n\t\t\t\t\t\t\tdone: context.done\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (record.type === \"throw\") {\n\t\t\t\t\t\tstate = GenStateCompleted; // Dispatch the exception by looping back around to the\n\t\t\t\t\t\t// context.dispatchException(context.arg) call above.\n\n\t\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\t\tcontext.arg = record.arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t} // Call delegate.iterator[context.method](context.arg) and handle the\n\t\t// result, either by returning a { value, done } result from the\n\t\t// delegate iterator, or by modifying context.method and context.arg,\n\t\t// setting context.delegate to null, and returning the ContinueSentinel.\n\n\n\t\tfunction maybeInvokeDelegate(delegate, context) {\n\t\t\tvar method = delegate.iterator[context.method];\n\n\t\t\tif (method === undefined$1) {\n\t\t\t\t// A .throw or .return when the delegate iterator has no .throw\n\t\t\t\t// method always terminates the yield* loop.\n\t\t\t\tcontext.delegate = null;\n\n\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t// Note: [\"return\"] must be used for ES3 parsing compatibility.\n\t\t\t\t\tif (delegate.iterator[\"return\"]) {\n\t\t\t\t\t\t// If the delegate iterator has a return method, give it a\n\t\t\t\t\t\t// chance to clean up.\n\t\t\t\t\t\tcontext.method = \"return\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t\tmaybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t\t\t// If maybeInvokeDelegate(context) changed context.method from\n\t\t\t\t\t\t\t// \"return\" to \"throw\", let that override the TypeError below.\n\t\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\tcontext.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar record = tryCatch(method, delegate.iterator, context.arg);\n\n\t\t\tif (record.type === \"throw\") {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = record.arg;\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar info = record.arg;\n\n\t\t\tif (!info) {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = new TypeError(\"iterator result is not an object\");\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tif (info.done) {\n\t\t\t\t// Assign the result of the finished delegate to the temporary\n\t\t\t\t// variable specified by delegate.resultName (see delegateYield).\n\t\t\t\tcontext[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n\t\t\t\tcontext.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n\t\t\t\t// exception, let the outer generator proceed normally. If\n\t\t\t\t// context.method was \"next\", forget context.arg since it has been\n\t\t\t\t// \"consumed\" by the delegate iterator. If context.method was\n\t\t\t\t// \"return\", allow the original .return call to continue in the\n\t\t\t\t// outer generator.\n\n\t\t\t\tif (context.method !== \"return\") {\n\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Re-yield the result returned by the delegate method.\n\t\t\t\treturn info;\n\t\t\t} // The delegate iterator is finished, so forget it and continue with\n\t\t\t// the outer generator.\n\n\n\t\t\tcontext.delegate = null;\n\t\t\treturn ContinueSentinel;\n\t\t} // Define Generator.prototype.{next,throw,return} in terms of the\n\t\t// unified ._invoke helper method.\n\n\n\t\tdefineIteratorMethods(Gp);\n\t\tdefine(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n\t\t// @@iterator function is called on it. Some browsers' implementations of the\n\t\t// iterator prototype chain incorrectly implement this, causing the Generator\n\t\t// object to not be returned from this call. This ensures that doesn't happen.\n\t\t// See https://github.com/facebook/regenerator/issues/274 for more details.\n\n\t\tGp[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tGp.toString = function () {\n\t\t\treturn \"[object Generator]\";\n\t\t};\n\n\t\tfunction pushTryEntry(locs) {\n\t\t\tvar entry = {\n\t\t\t\ttryLoc: locs[0]\n\t\t\t};\n\n\t\t\tif (1 in locs) {\n\t\t\t\tentry.catchLoc = locs[1];\n\t\t\t}\n\n\t\t\tif (2 in locs) {\n\t\t\t\tentry.finallyLoc = locs[2];\n\t\t\t\tentry.afterLoc = locs[3];\n\t\t\t}\n\n\t\t\tthis.tryEntries.push(entry);\n\t\t}\n\n\t\tfunction resetTryEntry(entry) {\n\t\t\tvar record = entry.completion || {};\n\t\t\trecord.type = \"normal\";\n\t\t\tdelete record.arg;\n\t\t\tentry.completion = record;\n\t\t}\n\n\t\tfunction Context(tryLocsList) {\n\t\t\t// The root entry object (effectively a try statement without a catch\n\t\t\t// or a finally block) gives us a place to store values thrown from\n\t\t\t// locations where there is no enclosing try statement.\n\t\t\tthis.tryEntries = [{\n\t\t\t\ttryLoc: \"root\"\n\t\t\t}];\n\t\t\ttryLocsList.forEach(pushTryEntry, this);\n\t\t\tthis.reset(true);\n\t\t}\n\n\t\texports.keys = function (object) {\n\t\t\tvar keys = [];\n\n\t\t\tfor (var key in object) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\n\t\t\tkeys.reverse(); // Rather than returning an object with a next method, we keep\n\t\t\t// things simple and return the next function itself.\n\n\t\t\treturn function next() {\n\t\t\t\twhile (keys.length) {\n\t\t\t\t\tvar key = keys.pop();\n\n\t\t\t\t\tif (key in object) {\n\t\t\t\t\t\tnext.value = key;\n\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t}\n\t\t\t\t} // To avoid creating an additional object, we just hang the .value\n\t\t\t\t// and .done properties off the next function object itself. This\n\t\t\t\t// also ensures that the minifier will not anonymize the function.\n\n\n\t\t\t\tnext.done = true;\n\t\t\t\treturn next;\n\t\t\t};\n\t\t};\n\n\t\tfunction values(iterable) {\n\t\t\tif (iterable) {\n\t\t\t\tvar iteratorMethod = iterable[iteratorSymbol];\n\n\t\t\t\tif (iteratorMethod) {\n\t\t\t\t\treturn iteratorMethod.call(iterable);\n\t\t\t\t}\n\n\t\t\t\tif (typeof iterable.next === \"function\") {\n\t\t\t\t\treturn iterable;\n\t\t\t\t}\n\n\t\t\t\tif (!isNaN(iterable.length)) {\n\t\t\t\t\tvar i = -1,\n\t\t\t\t\t\t\tnext = function next() {\n\t\t\t\t\t\twhile (++i < iterable.length) {\n\t\t\t\t\t\t\tif (hasOwn.call(iterable, i)) {\n\t\t\t\t\t\t\t\tnext.value = iterable[i];\n\t\t\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext.value = undefined$1;\n\t\t\t\t\t\tnext.done = true;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t};\n\n\t\t\t\t\treturn next.next = next;\n\t\t\t\t}\n\t\t\t} // Return an iterator with no values.\n\n\n\t\t\treturn {\n\t\t\t\tnext: doneResult\n\t\t\t};\n\t\t}\n\n\t\texports.values = values;\n\n\t\tfunction doneResult() {\n\t\t\treturn {\n\t\t\t\tvalue: undefined$1,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tContext.prototype = {\n\t\t\tconstructor: Context,\n\t\t\treset: function reset(skipTempReset) {\n\t\t\t\tthis.prev = 0;\n\t\t\t\tthis.next = 0; // Resetting context._sent for legacy support of Babel's\n\t\t\t\t// function.sent implementation.\n\n\t\t\t\tthis.sent = this._sent = undefined$1;\n\t\t\t\tthis.done = false;\n\t\t\t\tthis.delegate = null;\n\t\t\t\tthis.method = \"next\";\n\t\t\t\tthis.arg = undefined$1;\n\t\t\t\tthis.tryEntries.forEach(resetTryEntry);\n\n\t\t\t\tif (!skipTempReset) {\n\t\t\t\t\tfor (var name in this) {\n\t\t\t\t\t\t// Not sure about the optimal order of these conditions:\n\t\t\t\t\t\tif (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n\t\t\t\t\t\t\tthis[name] = undefined$1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tthis.done = true;\n\t\t\t\tvar rootEntry = this.tryEntries[0];\n\t\t\t\tvar rootRecord = rootEntry.completion;\n\n\t\t\t\tif (rootRecord.type === \"throw\") {\n\t\t\t\t\tthrow rootRecord.arg;\n\t\t\t\t}\n\n\t\t\t\treturn this.rval;\n\t\t\t},\n\t\t\tdispatchException: function dispatchException(exception) {\n\t\t\t\tif (this.done) {\n\t\t\t\t\tthrow exception;\n\t\t\t\t}\n\n\t\t\t\tvar context = this;\n\n\t\t\t\tfunction handle(loc, caught) {\n\t\t\t\t\trecord.type = \"throw\";\n\t\t\t\t\trecord.arg = exception;\n\t\t\t\t\tcontext.next = loc;\n\n\t\t\t\t\tif (caught) {\n\t\t\t\t\t\t// If the dispatched exception was caught by a catch block,\n\t\t\t\t\t\t// then let that catch block handle the exception normally.\n\t\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !!caught;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\tif (entry.tryLoc === \"root\") {\n\t\t\t\t\t\t// Exception thrown outside of any try block that could handle\n\t\t\t\t\t\t// it, so set the completion value of the entire function to\n\t\t\t\t\t\t// throw the exception.\n\t\t\t\t\t\treturn handle(\"end\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev) {\n\t\t\t\t\t\tvar hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t\t\t\t\t\tvar hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t\t\t\t\t\tif (hasCatch && hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t} else if (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasCatch) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(\"try statement without catch or finally\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tabrupt: function abrupt(type, arg) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n\t\t\t\t\t\tvar finallyEntry = entry;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n\t\t\t\t\t// Ignore the finally entry if control is not jumping to a\n\t\t\t\t\t// location outside the try/catch block.\n\t\t\t\t\tfinallyEntry = null;\n\t\t\t\t}\n\n\t\t\t\tvar record = finallyEntry ? finallyEntry.completion : {};\n\t\t\t\trecord.type = type;\n\t\t\t\trecord.arg = arg;\n\n\t\t\t\tif (finallyEntry) {\n\t\t\t\t\tthis.method = \"next\";\n\t\t\t\t\tthis.next = finallyEntry.finallyLoc;\n\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t}\n\n\t\t\t\treturn this.complete(record);\n\t\t\t},\n\t\t\tcomplete: function complete(record, afterLoc) {\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\tthrow record.arg;\n\t\t\t\t}\n\n\t\t\t\tif (record.type === \"break\" || record.type === \"continue\") {\n\t\t\t\t\tthis.next = record.arg;\n\t\t\t\t} else if (record.type === \"return\") {\n\t\t\t\t\tthis.rval = this.arg = record.arg;\n\t\t\t\t\tthis.method = \"return\";\n\t\t\t\t\tthis.next = \"end\";\n\t\t\t\t} else if (record.type === \"normal\" && afterLoc) {\n\t\t\t\t\tthis.next = afterLoc;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t},\n\t\t\tfinish: function finish(finallyLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.finallyLoc === finallyLoc) {\n\t\t\t\t\t\tthis.complete(entry.completion, entry.afterLoc);\n\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"catch\": function _catch(tryLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc === tryLoc) {\n\t\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\t\t\tvar thrown = record.arg;\n\t\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn thrown;\n\t\t\t\t\t}\n\t\t\t\t} // The context.catch method must only be called with a location\n\t\t\t\t// argument that corresponds to a known catch block.\n\n\n\t\t\t\tthrow new Error(\"illegal catch attempt\");\n\t\t\t},\n\t\t\tdelegateYield: function delegateYield(iterable, resultName, nextLoc) {\n\t\t\t\tthis.delegate = {\n\t\t\t\t\titerator: values(iterable),\n\t\t\t\t\tresultName: resultName,\n\t\t\t\t\tnextLoc: nextLoc\n\t\t\t\t};\n\n\t\t\t\tif (this.method === \"next\") {\n\t\t\t\t\t// Deliberately forget the last sent value so that we don't\n\t\t\t\t\t// accidentally pass it on to the delegate.\n\t\t\t\t\tthis.arg = undefined$1;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\t\t}; // Regardless of whether this script is executing as a CommonJS module\n\t\t// or not, return the runtime object so that we can declare the variable\n\t\t// regeneratorRuntime in the outer scope, which allows this module to be\n\t\t// injected easily by `bin/regenerator --include-runtime script.js`.\n\n\t\treturn exports;\n\t}( // If this script is executing as a CommonJS module, use module.exports\n\t// as the regeneratorRuntime namespace. Otherwise create a new empty\n\t// object. Either way, the resulting object will be used to initialize\n\t// the regeneratorRuntime variable at the top of this file.\n\ttypeof module === \"object\" ? module.exports : {});\n\n\ttry {\n\t\tregeneratorRuntime = runtime;\n\t} catch (accidentalStrictMode) {\n\t\t// This module should not be running in strict mode, so the above\n\t\t// assignment should always work unless something is misconfigured. Just\n\t\t// in case runtime.js accidentally runs in strict mode, we can escape\n\t\t// strict mode using a global Function call. This could conceivably fail\n\t\t// if a Content Security Policy forbids using Function, but in that case\n\t\t// the proper solution is to fix the accidental strict mode problem. If\n\t\t// you've misconfigured your bundler to force strict mode and applied a\n\t\t// CSP to forbid Function, and you're not willing to fix either of those\n\t\t// problems, please detail your unique predicament in a GitHub issue.\n\t\tFunction(\"r\", \"regeneratorRuntime = r\")(runtime);\n\t}\n\n\tvar REVISION = '125';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = '100';\n\tvar GLSL3 = '300 es';\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t\ttry {\n\t\t\tvar info = gen[key](arg);\n\t\t\tvar value = info.value;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (info.done) {\n\t\t\tresolve(value);\n\t\t} else {\n\t\t\tPromise.resolve(value).then(_next, _throw);\n\t\t}\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t\treturn function () {\n\t\t\tvar self = this,\n\t\t\t\t\targs = arguments;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tvar gen = fn.apply(self, args);\n\n\t\t\t\tfunction _next(value) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t\t\t\t}\n\n\t\t\t\tfunction _throw(err) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t\t\t\t}\n\n\t\t\t\t_next(undefined);\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\t\tsubClass.__proto__ = superClass;\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t\tif (!o) return;\n\t\tif (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t\tvar n = Object.prototype.toString.call(o).slice(8, -1);\n\t\tif (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t\tif (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t\tif (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t\tif (len == null || len > arr.length) len = arr.length;\n\n\t\tfor (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t\treturn arr2;\n\t}\n\n\tfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n\t\tvar it;\n\n\t\tif (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n\t\t\tif (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n\t\t\t\tif (it) o = it;\n\t\t\t\tvar i = 0;\n\t\t\t\treturn function () {\n\t\t\t\t\tif (i >= o.length) return {\n\t\t\t\t\t\tdone: true\n\t\t\t\t\t};\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: o[i++]\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t\t}\n\n\t\tit = o[Symbol.iterator]();\n\t\treturn it.next.bind(it);\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\t\tdamp: function damp(x, y, lambda, dt) {\n\t\t\treturn MathUtils.lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t\t},\n\t\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\t\tpingpong: function pingpong(x, length) {\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\treturn length - Math.abs(MathUtils.euclideanModulo(x, length * 2) - length);\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tObject.defineProperty(this, 'isMatrix3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn12 = te[3],\n\t\t\t\t\tn22 = te[4],\n\t\t\t\t\tn32 = te[5],\n\t\t\t\t\tn13 = te[6],\n\t\t\t\t\tn23 = te[7],\n\t\t\t\t\tn33 = te[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).copy(this).invert().transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\tif (image === void 0) {\n\t\t\timage = Texture.DEFAULT_IMAGE;\n\t\t}\n\n\t\tif (mapping === void 0) {\n\t\t\tmapping = Texture.DEFAULT_MAPPING;\n\t\t}\n\n\t\tif (wrapS === void 0) {\n\t\t\twrapS = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (wrapT === void 0) {\n\t\t\twrapT = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (magFilter === void 0) {\n\t\t\tmagFilter = LinearFilter;\n\t\t}\n\n\t\tif (minFilter === void 0) {\n\t\t\tminFilter = LinearMipmapLinearFilter;\n\t\t}\n\n\t\tif (format === void 0) {\n\t\t\tformat = RGBAFormat;\n\t\t}\n\n\t\tif (type === void 0) {\n\t\t\ttype = UnsignedByteType;\n\t\t}\n\n\t\tif (anisotropy === void 0) {\n\t\t\tanisotropy = 1;\n\t\t}\n\n\t\tif (encoding === void 0) {\n\t\t\tencoding = LinearEncoding;\n\t\t}\n\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: textureId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\t\tthis.mapping = mapping;\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\t\tthis.anisotropy = anisotropy;\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\t\tthis.offset = new Vector2(0, 0);\n\t\tthis.repeat = new Vector2(1, 1);\n\t\tthis.center = new Vector2(0, 0);\n\t\tthis.rotation = 0;\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\tthis.encoding = encoding;\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Texture,\n\t\tisTexture: true,\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t},\n\t\ttransformUv: function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\t});\n\tObject.defineProperty(Texture.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tvar WebGLRenderTarget = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(WebGLRenderTarget, _EventDispatcher);\n\n\t\tfunction WebGLRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\t_this.scissor = new Vector4(0, 0, width, height);\n\t\t\t_this.scissorTest = false;\n\t\t\t_this.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.image = {};\n\t\t\t_this.texture.image.width = width;\n\t\t\t_this.texture.image.height = height;\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\t_this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\t_this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLRenderTarget.prototype;\n\n\t\t_proto.setSize = function setSize(width, height) {\n\t\t\tif (this.width !== width || this.height !== height) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\treturn WebGLRenderTarget;\n\t}(EventDispatcher);\n\n\tvar WebGLMultisampleRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLMultisampleRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _WebGLRenderTarget.call(this, width, height, options) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLMultisampleRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.samples = 4;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLMultisampleRenderTarget.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_WebGLRenderTarget.prototype.copy.call(this, source);\n\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn WebGLMultisampleRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isQuaternion', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tthis.center = center !== undefined ? center : new Vector3();\n\t\t\tthis.radius = radius !== undefined ? radius : -1;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tthis.origin = origin !== undefined ? origin : new Vector3();\n\t\t\tthis.direction = direction !== undefined ? direction : new Vector3(0, 0, -1);\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tObject.defineProperty(this, 'isMatrix4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix3 = function setFromMatrix3(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn41 = te[3],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn14 = te[12],\n\t\t\t\t\tn24 = te[13],\n\t\t\t\t\tn34 = te[14],\n\t\t\t\t\tn44 = te[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isEuler', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function clear() {\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tvar object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (var _i3 = 0; _i3 < this.animations.length; _i3++) {\n\t\t\t\t\tvar animation = this.animations[_i3];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tvar skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tvar animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = true;\n\t\t\t}\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tObject.defineProperty(this, 'isPlane', {\n\t\t\t\tvalue: true\n\t\t\t}); // normal is assumed to be normalized\n\n\t\t\tthis.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);\n\t\t\tthis.constant = constant !== undefined ? constant : 0;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tthis.a = a !== undefined ? a : new Vector3();\n\t\t\tthis.b = b !== undefined ? b : new Vector3();\n\t\t\tthis.c = c !== undefined ? c : new Vector3();\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tObject.defineProperty(this, 'isColor', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpColors = function lerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\tvar Face3 = /*#__PURE__*/function () {\n\t\tfunction Face3(a, b, c, normal, color, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.normal = normal && normal.isVector3 ? normal : new Vector3();\n\t\t\tthis.vertexNormals = Array.isArray(normal) ? normal : [];\n\t\t\tthis.color = color && color.isColor ? color : new Color();\n\t\t\tthis.vertexColors = Array.isArray(color) ? color : [];\n\t\t\tthis.materialIndex = materialIndex;\n\t\t}\n\n\t\tvar _proto = Face3.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\t\t\tthis.normal.copy(source.normal);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n\t\t\t\tthis.vertexNormals[i] = source.vertexNormals[i].clone();\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = source.vertexColors.length; _i < _il; _i++) {\n\t\t\t\tthis.vertexColors[_i] = source.vertexColors[_i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Face3;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\t\t\tif (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshBasicMaterial';\n\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create(Material.prototype);\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tvar _id = 0;\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _id++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function hasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar indices = index.array;\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal.array;\n\t\t\tvar uvs = attributes.uv.array;\n\t\t\tvar nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tvar tangents = attributes.tangent.array;\n\t\t\tvar tan1 = [],\n\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (var i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tvar vA = new Vector3(),\n\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tvar r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (var _i3 = 0, il = groups.length; _i3 < il; ++_i3) {\n\t\t\t\tvar group = groups[_i3];\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmp = new Vector3(),\n\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tvar n = new Vector3(),\n\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tvar t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tvar test = tmp2.dot(tan2[v]);\n\t\t\t\tvar w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (var _i4 = 0, _il3 = groups.length; _i4 < _il3; ++_i4) {\n\t\t\t\tvar _group = groups[_i4];\n\t\t\t\tvar _start = _group.start;\n\t\t\t\tvar _count = _group.count;\n\n\t\t\t\tfor (var _j = _start, _jl = _start + _count; _j < _jl; _j += 3) {\n\t\t\t\t\thandleVertex(indices[_j + 0]);\n\t\t\t\t\thandleVertex(indices[_j + 1]);\n\t\t\t\t\thandleVertex(indices[_j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i5 = 0, _il4 = index.count; _i5 < _il4; _i5 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i5 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i5 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i5 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i6 = 0, _il5 = positionAttribute.count; _i6 < _il5; _i6 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i6 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i6 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i6 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i7 = 0, l = groups.length; _i7 < l; _i7++) {\n\t\t\t\tvar group = groups[_i7];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute2 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute2.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute2.name !== '') _attributeData.name = _attribute2.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i8 = 0, _l = groups.length; _i8 < _l; _i8++) {\n\t\t\t\tvar group = groups[_i8];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new MeshBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = new Face3(a, b, c);\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxGeometry, _BufferGeometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tif (fov === void 0) {\n\t\t\tfov = 50;\n\t\t}\n\n\t\tif (aspect === void 0) {\n\t\t\taspect = 1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tfunction CubeCamera(near, far, renderTarget) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'CubeCamera';\n\n\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set(0, -1, 0);\n\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\tthis.add(cameraPX);\n\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set(0, -1, 0);\n\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\tthis.add(cameraNX);\n\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set(0, 0, 1);\n\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\tthis.add(cameraPY);\n\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set(0, 0, -1);\n\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\tthis.add(cameraNY);\n\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set(0, -1, 0);\n\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\tthis.add(cameraPZ);\n\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set(0, -1, 0);\n\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\tthis.add(cameraNZ);\n\n\t\tthis.update = function (renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\t}\n\n\tCubeCamera.prototype = Object.create(Object3D.prototype);\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\t\tTexture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.flipY = false; // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t//\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\tthis._needsFlipEnvMap = true;\n\t}\n\n\tCubeTexture.prototype = Object.create(Texture.prototype);\n\tCubeTexture.prototype.constructor = CubeTexture;\n\tCubeTexture.prototype.isCubeTexture = true;\n\tObject.defineProperty(CubeTexture.prototype, 'images', {\n\t\tget: function get() {\n\t\t\treturn this.image;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.image = value;\n\t\t}\n\t});\n\n\tvar WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLCubeRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\t\tvar _this;\n\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\t_this = _WebGLRenderTarget.call(this, size, size, options) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLCubeRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture._needsFlipEnvMap = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLCubeRenderTarget.prototype;\n\n\t\t_proto.fromEquirectangularTexture = function fromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tvar shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"\n\t\t\t};\n\t\t\tvar geometry = new BoxGeometry(5, 5, 5);\n\t\t\tvar material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tvar mesh = new Mesh(geometry, material);\n\t\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tvar camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clear = function clear(renderer, color, depth, stencil) {\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t};\n\n\t\treturn WebGLCubeRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture.prototype = Object.create(Texture.prototype);\n\tDataTexture.prototype.constructor = DataTexture;\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tthis.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = 5131;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = 5123;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneGeometry, _BufferGeometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments);\n\t\t\tvar gridY = Math.floor(heightSegments);\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; //\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tif (alpha === void 0) {\n\t\t\t\t\talpha = 1;\n\t\t\t\t}\n\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\trenderer.setRenderList(currentRenderList);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tvar cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function init(capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tvar extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tvar attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tvar instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture2DArray.prototype = Object.create(Texture.prototype);\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction DataTexture3D(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture3D.prototype = Object.create(Texture.prototype);\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'maxMorphTargets', 'maxMorphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, camera) {\n\t\t\tvar cameras = lists.get(scene);\n\t\t\tvar list;\n\n\t\t\tif (cameras === undefined) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, new WeakMap());\n\t\t\t\tlists.get(scene).set(camera, list);\n\t\t\t} else {\n\t\t\t\tlist = cameras.get(camera);\n\n\t\t\t\tif (list === undefined) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tcameras.set(camera, list);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (var _i3 = 0, l = lights.length; _i3 < l; _i3++) {\n\t\t\t\tvar light = lights[_i3];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms5 = state.spot[spotLength];\n\n\t\t\t\t\t_uniforms5.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms5.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms5.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms5.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms6 = state.rectArea[rectAreaLength];\n\n\t\t\t\t\t_uniforms6.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms6.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms6.halfHeight.applyMatrix4(matrix42);\n\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms7 = state.point[pointLength];\n\n\t\t\t\t\t_uniforms7.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms7.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms8 = state.hemi[hemiLength];\n\n\t\t\t\t\t_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms8.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms8.direction.normalize();\n\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tvar lights = new WebGLLights(extensions, capabilities);\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tif (renderCallDepth === void 0) {\n\t\t\t\trenderCallDepth = 0;\n\t\t\t}\n\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, []);\n\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDepthMaterial';\n\t\tthis.depthPacking = BasicDepthPacking;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create(Material.prototype);\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.depthPacking = source.depthPacking;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDistanceMaterial';\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create(Material.prototype);\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.referencePosition.copy(source.referencePosition);\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\treturn this;\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!currentBlendingEnabled) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = null;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n\t\t\ttextureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(renderTarget.texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension) {\n\t\t\t\tif (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n\t\t\t\tif (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, renderTarget.texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(3553, renderTarget.texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tif (array === void 0) {\n\t\t\tarray = [];\n\t\t}\n\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array;\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tfunction Group() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Group';\n\t}\n\n\tGroup.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Group,\n\t\tisGroup: true\n\t});\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var _iterator = _createForOfIteratorHelperLoose(inputSource.hand.values()), _step; !(_step = _iterator()).done;) {\n\t\t\t\t\t\tvar inputjoint = _step.value;\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tvar _joint = new Group();\n\n\t\t\t\t\t\t\t_joint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\t_joint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = _joint; // ??\n\n\t\t\t\t\t\t\thand.add(_joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tvar indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tvar thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear();\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null; //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = /*#__PURE__*/function () {\n\t\t\tvar _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {\n\t\t\t\tvar attributes, layerInit, baseLayer;\n\t\t\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\t\t\twhile (1) {\n\t\t\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tsession = value;\n\n\t\t\t\t\t\t\t\tif (!(session !== null)) {\n\t\t\t\t\t\t\t\t\t_context.next = 24;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\t\t\t\tattributes = gl.getContextAttributes();\n\n\t\t\t\t\t\t\t\tif (!(attributes.xrCompatible !== true)) {\n\t\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\treturn gl.makeXRCompatible();\n\n\t\t\t\t\t\t\tcase 14:\n\t\t\t\t\t\t\t\tlayerInit = {\n\t\t\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\t\t\t\tbaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t_context.next = 19;\n\t\t\t\t\t\t\t\treturn session.requestReferenceSpace(referenceSpaceType);\n\n\t\t\t\t\t\t\tcase 19:\n\t\t\t\t\t\t\t\treferenceSpace = _context.sent;\n\t\t\t\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\t\t\t\tanimation.start();\n\t\t\t\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcase 24:\n\t\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, _callee);\n\t\t\t}));\n\n\t\t\treturn function (_x) {\n\t\t\t\treturn _ref.apply(this, arguments);\n\t\t\t};\n\t\t}();\n\n\t\tfunction onInputSourcesChange(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tvar canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its state isolated from the parent render call.\n\n\t\tvar renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, camera);\n\t\t\tcurrentRenderList.init();\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\tcurrentRenderList = null;\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true; // always update environment and fog - changing these trigger an initMaterial call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t} // store the light setup it was created for\n\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderList = function () {\n\t\t\treturn currentRenderList;\n\t\t};\n\n\t\tthis.setRenderList = function (renderList) {\n\t\t\tcurrentRenderList = renderList;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tfunction WebGL1Renderer(parameters) {\n\t\tWebGLRenderer.call(this, parameters);\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {\n\t\tconstructor: WebGL1Renderer,\n\t\tisWebGL1Renderer: true\n\t});\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tObject.defineProperty(this, 'isFogExp2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tObject.defineProperty(this, 'isFog', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isScene', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'SpriteMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.rotation = 0;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tSpriteMaterial.prototype = Object.create(Material.prototype);\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.rotation = source.rotation;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\treturn this;\n\t};\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\n\tvar _worldScale = new Vector3();\n\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\n\tvar _rotatedPosition = new Vector2();\n\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\n\tvar _vB$1 = new Vector3();\n\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\n\tvar _uvB$1 = new Vector2();\n\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite(material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Sprite';\n\n\t\tif (_geometry === undefined) {\n\t\t\t_geometry = new BufferGeometry();\n\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\tthis.center = new Vector2(0.5, 0.5);\n\t}\n\n\tSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Sprite,\n\t\tisSprite: true,\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = new Vector3();\n\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\t\tObject3D.call(this);\n\t\tthis._currentLevel = 0;\n\t\tthis.type = 'LOD';\n\t\tObject.defineProperties(this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t});\n\t\tthis.autoUpdate = true;\n\t}\n\n\tLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: LOD,\n\t\tisLOD: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source, false);\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t},\n\t\taddLevel: function addLevel(object, distance) {\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetCurrentLevel: function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t},\n\t\tgetObjectForDistance: function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t},\n\t\tupdate: function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _basePosition = new Vector3();\n\n\tvar _skinIndex = new Vector4();\n\n\tvar _skinWeight = new Vector4();\n\n\tvar _vector$7 = new Vector3();\n\n\tvar _matrix$1 = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tif (geometry && geometry.isGeometry) {\n\t\t\tconsole.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t}\n\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function boneTransform(index, target) {\n\t\t\tvar skeleton = this.skeleton;\n\t\t\tvar geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tvar boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _offsetMatrix = new Matrix4();\n\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton(bones, boneInverses) {\n\t\tif (bones === void 0) {\n\t\t\tbones = [];\n\t\t}\n\n\t\tif (boneInverses === void 0) {\n\t\t\tboneInverses = [];\n\t\t}\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.bones = bones.slice(0);\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\t\tthis.frame = -1;\n\t\tthis.init();\n\t}\n\n\tObject.assign(Skeleton.prototype, {\n\t\tinit: function init() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcalculateInverses: function calculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t},\n\t\tpose: function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.parent.matrixWorld).invert();\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdate: function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t},\n\t\tgetBoneByName: function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t},\n\t\tfromJSON: function fromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (var i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tvar uuid = json.bones[i];\n\t\t\t\tvar bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\n\t\t\tfor (var i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tvar bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tvar boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function getColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'LineBasicMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineBasicMaterial.prototype = Object.create(Material.prototype);\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new LineBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, _l = positionAttribute.count - 1; _i < _l; _i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LineLoop(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineLoop';\n\t}\n\n\tLineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineLoop,\n\t\tisLineLoop: true\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'PointsMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tPointsMaterial.prototype = Object.create(Material.prototype);\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new PointsMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.generateMipmaps = false;\n\t\tvar scope = this;\n\n\t\tfunction updateVideo() {\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\n\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\t}\n\n\tVideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n\t\tconstructor: VideoTexture,\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t},\n\t\tisVideoTexture: true,\n\t\tupdate: function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tCompressedTexture.prototype = Object.create(Texture.prototype);\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.needsUpdate = true;\n\t}\n\n\tCanvasTexture.prototype = Object.create(Texture.prototype);\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t}\n\n\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tDepthTexture.prototype = Object.create(Texture.prototype);\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar CircleGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleGeometry, _BufferGeometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 8;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderGeometry, _BufferGeometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radiusTop === void 0) {\n\t\t\t\tradiusTop = 1;\n\t\t\t}\n\n\t\t\tif (radiusBottom === void 0) {\n\t\t\t\tradiusBottom = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(BufferGeometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheGeometry, _BufferGeometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 12;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(BufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar RingGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingGeometry, _BufferGeometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (innerRadius === void 0) {\n\t\t\t\tinnerRadius = 0.5;\n\t\t\t}\n\n\t\t\tif (outerRadius === void 0) {\n\t\t\t\touterRadius = 1;\n\t\t\t}\n\n\t\t\tif (thetaSegments === void 0) {\n\t\t\t\tthetaSegments = 8;\n\t\t\t}\n\n\t\t\tif (phiSegments === void 0) {\n\t\t\t\tphiSegments = 1;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(BufferGeometry);\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeGeometry, _BufferGeometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (curveSegments === void 0) {\n\t\t\t\tcurveSegments = 12;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$1(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$1(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereGeometry, _BufferGeometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 6;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(BufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n\t\t_inheritsLoose(TextGeometry, _ExtrudeGeometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tif (parameters === void 0) {\n\t\t\t\tparameters = {};\n\t\t\t}\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeGeometry.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(ExtrudeGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusGeometry, _BufferGeometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 6;\n\t\t\t}\n\n\t\t\tif (arc === void 0) {\n\t\t\t\tarc = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (p === void 0) {\n\t\t\t\tp = 2;\n\t\t\t}\n\n\t\t\tif (q === void 0) {\n\t\t\t\tq = 3;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeGeometry, _BufferGeometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeGeometry;\n\t}(BufferGeometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t} // buffer\n\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tvar edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tvar edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\tfor (var _i = 0, _l = _position.count / 3; _i < _l; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tvar index1 = 3 * _i + _j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tvar index2 = 3 * _i + (_j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShadowMaterial';\n\t\tthis.color = new Color(0x000000);\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tShadowMaterial.prototype = Object.create(Material.prototype);\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\treturn this;\n\t};\n\n\tfunction RawShaderMaterial(parameters) {\n\t\tShaderMaterial.call(this, parameters);\n\t\tthis.type = 'RawShaderMaterial';\n\t}\n\n\tRawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshPhongMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.specular = new Color(0x111111);\n\t\tthis.shininess = 30;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create(Material.prototype);\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.specular.copy(source.specular);\n\t\tthis.shininess = source.shininess;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'TOON': ''\n\t\t};\n\t\tthis.type = 'MeshToonMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshToonMaterial.prototype = Object.create(Material.prototype);\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshNormalMaterial';\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create(Material.prototype);\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshLambertMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create(Material.prototype);\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.type = 'MeshMatcapMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.matcap = null;\n\t\tthis.map = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create(Material.prototype);\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.matcap = source.matcap;\n\t\tthis.map = source.map;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial(parameters) {\n\t\tLineBasicMaterial.call(this);\n\t\tthis.type = 'LineDashedMaterial';\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function (source) {\n\t\tLineBasicMaterial.prototype.copy.call(this, source);\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\t\treturn this;\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === void 0) {\n\t\t\t\treferenceFrame = 0;\n\t\t\t}\n\n\t\t\tif (referenceClip === void 0) {\n\t\t\t\treferenceClip = targetClip;\n\t\t\t}\n\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\tthis.name = name;\n\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t} // Static methods\n\n\n\tObject.assign(KeyframeTrack, {\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\t\ttoJSON: function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== undefined) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\t});\n\tObject.assign(KeyframeTrack.prototype, {\n\t\tconstructor: KeyframeTrack,\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tsetInterpolation: function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t},\n\t\tgetInterpolation: function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t},\n\t\tgetValueSize: function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t},\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tfunction BooleanKeyframeTrack(name, times, values) {\n\t\tKeyframeTrack.call(this, name, times, values);\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: BooleanKeyframeTrack,\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t});\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tfunction ColorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: ColorKeyframeTrack,\n\t\tValueTypeName: 'color' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t});\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tfunction NumberKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: NumberKeyframeTrack,\n\t\tValueTypeName: 'number' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tfunction QuaternionKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: QuaternionKeyframeTrack,\n\t\tValueTypeName: 'quaternion',\n\t\t// ValueBufferType is inherited\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t});\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tfunction StringKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: StringKeyframeTrack,\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t});\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tfunction VectorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: VectorKeyframeTrack,\n\t\tValueTypeName: 'vector' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\tif (duration === void 0) {\n\t\t\tduration = -1;\n\t\t}\n\n\t\tif (blendMode === void 0) {\n\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\tif (this.duration < 0) {\n\t\t\tthis.resetDuration();\n\t\t}\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tObject.assign(AnimationClip, {\n\t\tparse: function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t},\n\t\ttoJSON: function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t},\n\t\tCreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new AnimationClip(name, -1, tracks);\n\t\t},\n\t\tfindByName: function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tCreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(AnimationClip.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t},\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\t});\n\tObject.assign(AnimationClip.prototype, {\n\t\tresetDuration: function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t},\n\t\ttrim: function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\toptimize: function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new AnimationClip(this.name, this.duration, tracks, this.blendMode);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn AnimationClip.toJSON(this);\n\t\t}\n\t});\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AnimationLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AnimationLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction ImageLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\t});\n\n\tfunction CubeTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CubeTextureLoader,\n\t\tload: function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\tCurve.call(this);\n\t\tthis.type = 'EllipseCurve';\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\t\tthis.aClockwise = aClockwise || false;\n\t\tthis.aRotation = aRotation || 0;\n\t}\n\n\tEllipseCurve.prototype = Object.create(Curve.prototype);\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\twhile (deltaAngle < 0) {\n\t\t\tdeltaAngle += twoPi;\n\t\t}\n\n\t\twhile (deltaAngle > twoPi) {\n\t\t\tdeltaAngle -= twoPi;\n\t\t}\n\n\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\tif (samePoints) {\n\t\t\t\tdeltaAngle = 0;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = twoPi;\n\t\t\t}\n\t\t}\n\n\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t}\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\tif (this.aRotation !== 0) {\n\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t}\n\n\t\treturn point.set(x, y);\n\t};\n\n\tEllipseCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\t\tthis.aClockwise = source.aClockwise;\n\t\tthis.aRotation = source.aRotation;\n\t\treturn this;\n\t};\n\n\tEllipseCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\t\tdata.aClockwise = this.aClockwise;\n\t\tdata.aRotation = this.aRotation;\n\t\treturn data;\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\t\tthis.aClockwise = json.aClockwise;\n\t\tthis.aRotation = json.aRotation;\n\t\treturn this;\n\t};\n\n\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\tEllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\tthis.type = 'ArcCurve';\n\t}\n\n\tArcCurve.prototype = Object.create(EllipseCurve.prototype);\n\tArcCurve.prototype.constructor = ArcCurve;\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tif (closed === void 0) {\n\t\t\tclosed = false;\n\t\t}\n\n\t\tif (curveType === void 0) {\n\t\t\tcurveType = 'centripetal';\n\t\t}\n\n\t\tif (tension === void 0) {\n\t\t\ttension = 0.5;\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CatmullRomCurve3';\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create(Curve.prototype);\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\n\t\tif (this.closed) {\n\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\t\t}\n\n\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif (this.closed || intPoint > 0) {\n\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t} else {\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\tp0 = tmp;\n\t\t}\n\n\t\tvar p1 = points[intPoint % l];\n\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t} else {\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\tp3 = tmp;\n\t\t}\n\n\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t}\n\n\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\treturn point;\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\t\treturn this;\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\t\treturn data;\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve.prototype = Object.create(Curve.prototype);\n\tLineCurve.prototype.constructor = LineCurve;\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve.prototype.getTangent = function (t, optionalTarget) {\n\t\tvar tangent = optionalTarget || new Vector2();\n\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\treturn tangent;\n\t};\n\n\tLineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve3(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve3';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve3.prototype = Object.create(Curve.prototype);\n\tLineCurve3.prototype.constructor = LineCurve3;\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction SplineCurve(points) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'SplineCurve';\n\t\tthis.points = points;\n\t}\n\n\tSplineCurve.prototype = Object.create(Curve.prototype);\n\tSplineCurve.prototype.constructor = SplineCurve;\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar p = (points.length - 1) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\tvar p1 = points[intPoint];\n\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\treturn point;\n\t};\n\n\tSplineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tSplineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\t\tCurve.call(this);\n\t\tthis.type = 'CurvePath';\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\t}\n\n\tCurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n\t\tconstructor: CurvePath,\n\t\tadd: function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t},\n\t\tclosePath: function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t},\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\tgetPoint: function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t},\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\tgetLength: function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t},\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t},\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\tgetCurveLengths: function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t},\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 40;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 12;\n\t\t\t}\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurve.prototype.copy.call(this, source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurve.prototype.fromJSON.call(this, json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Path(points) {\n\t\tCurvePath.call(this);\n\t\tthis.type = 'Path';\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif (points) {\n\t\t\tthis.setFromPoints(points);\n\t\t}\n\t}\n\n\tPath.prototype = Object.assign(Object.create(CurvePath.prototype), {\n\t\tconstructor: Path,\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t},\n\t\tarc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tabsarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t},\n\t\tabsellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurvePath.prototype.copy.call(this, source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = CurvePath.prototype.toJSON.call(this);\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurvePath.prototype.fromJSON.call(this, json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Shape(points) {\n\t\tPath.call(this, points);\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.type = 'Shape';\n\t\tthis.holes = [];\n\t}\n\n\tShape.prototype = Object.assign(Object.create(Path.prototype), {\n\t\tconstructor: Shape,\n\t\tgetPointsHoles: function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t},\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\t\textractPoints: function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tPath.prototype.copy.call(this, source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Path.prototype.toJSON.call(this);\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tPath.prototype.fromJSON.call(this, json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Light(color, intensity) {\n\t\tif (intensity === void 0) {\n\t\t\tintensity = 1;\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Light';\n\t\tthis.color = new Color(color);\n\t\tthis.intensity = intensity;\n\t}\n\n\tLight.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Light,\n\t\tisLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\tLight.call(this, skyColor, intensity);\n\t\tthis.type = 'HemisphereLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.groundColor = new Color(groundColor);\n\t}\n\n\tHemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: HemisphereLight,\n\t\tisHemisphereLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LightShadow(camera) {\n\t\tthis.camera = camera;\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.mapSize = new Vector2(512, 512);\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2(1, 1);\n\t\tthis._viewportCount = 1;\n\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t}\n\n\tObject.assign(LightShadow.prototype, {\n\t\t_projScreenMatrix: new Matrix4(),\n\t\t_lightPositionWorld: new Vector3(),\n\t\t_lookTarget: new Vector3(),\n\t\tgetViewportCount: function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t},\n\t\tgetFrustum: function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t},\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tshadowCamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\tshadowCamera.lookAt(lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\tprojScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t},\n\t\tgetViewport: function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t},\n\t\tgetFrameExtents: function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\t});\n\n\tfunction SpotLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n\t\tthis.focus = 1;\n\t}\n\n\tSpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: SpotLightShadow,\n\t\tisSpotLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'SpotLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.angle = angle !== undefined ? angle : Math.PI / 3;\n\t\tthis.penumbra = penumbra !== undefined ? penumbra : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\t}\n\n\tSpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: SpotLight,\n\t\tisSpotLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction PointLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));\n\t\tthis._frameExtents = new Vector2(4, 2);\n\t\tthis._viewportCount = 6;\n\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t// following orientation:\n\t\t//\n\t\t//\txzXZ\n\t\t//\t y Y\n\t\t//\n\t\t// X - Positive x direction\n\t\t// x - Negative x direction\n\t\t// Y - Positive y direction\n\t\t// y - Negative y direction\n\t\t// Z - Positive z direction\n\t\t// z - Negative z direction\n\t\t// positive X\n\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\tnew Vector4(1, 0, 1, 1)];\n\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t}\n\n\tPointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: PointLightShadow,\n\t\tisPointLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === void 0) {\n\t\t\t\tviewportIndex = 0;\n\t\t\t}\n\n\t\t\tvar camera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tcamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.copy(camera.position);\n\t\t\tlookTarget.add(this._cubeDirections[viewportIndex]);\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);\n\t\t\tprojScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\t\t}\n\t});\n\n\tfunction PointLight(color, intensity, distance, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'PointLight';\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\t}\n\n\tPointLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: PointLight,\n\t\tisPointLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\tif (left === void 0) {\n\t\t\tleft = -1;\n\t\t}\n\n\t\tif (right === void 0) {\n\t\t\tright = 1;\n\t\t}\n\n\t\tif (top === void 0) {\n\t\t\ttop = 1;\n\t\t}\n\n\t\tif (bottom === void 0) {\n\t\t\tbottom = -1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'OrthographicCamera';\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tOrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: OrthographicCamera,\n\t\tisOrthographicCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t},\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction DirectionalLightShadow() {\n\t\tLightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: DirectionalLightShadow,\n\t\tisDirectionalLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction DirectionalLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'DirectionalLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tthis.shadow = new DirectionalLightShadow();\n\t}\n\n\tDirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: DirectionalLight,\n\t\tisDirectionalLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AmbientLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'AmbientLight';\n\t}\n\n\tAmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: AmbientLight,\n\t\tisAmbientLight: true\n\t});\n\n\tfunction RectAreaLight(color, intensity, width, height) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'RectAreaLight';\n\t\tthis.width = width !== undefined ? width : 10;\n\t\tthis.height = height !== undefined ? height : 10;\n\t}\n\n\tRectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: RectAreaLight,\n\t\tisRectAreaLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tObject.defineProperty(this, 'isSphericalHarmonics3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tfunction LightProbe(sh, intensity) {\n\t\tLight.call(this, undefined, intensity);\n\t\tthis.type = 'LightProbe';\n\t\tthis.sh = sh !== undefined ? sh : new SphericalHarmonics3();\n\t}\n\n\tLightProbe.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: LightProbe,\n\t\tisLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction MaterialLoader(manager) {\n\t\tLoader.call(this, manager);\n\t\tthis.textures = {};\n\t}\n\n\tMaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: MaterialLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t},\n\t\tsetTextures: function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction BufferGeometryLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: BufferGeometryLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = getTypedArray(attribute.type, attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = getTypedArray(_attribute.type, _attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\t});\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar animations = this.parseAnimations(json.animations);\n\t\t\tvar shapes = this.parseShapes(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tvar skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tvar hasImages = false;\n\n\t\t\t\tfor (var uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShapes = function parseShapes(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseSkeletons = function parseSkeletons(json, object) {\n\t\t\tvar skeletons = {};\n\t\t\tvar bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\t\tvar data = json[i];\n\t\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tvar url = image;\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (_deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = _deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\t\t\t\t\tvar image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials, animations) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tvar objectAnimations = data.animations;\n\n\t\t\t\tfor (var _i = 0; _i < objectAnimations.length; _i++) {\n\t\t\t\t\tvar uuid = objectAnimations[_i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.bindSkeletons = function bindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tvar skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, scope.options);\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tfunction ShapePath() {\n\t\tthis.type = 'ShapePath';\n\t\tthis.color = new Color();\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tObject.assign(ShapePath.prototype, {\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t},\n\t\ttoShapes: function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tvar Font = /*#__PURE__*/function () {\n\t\tfunction Font(data) {\n\t\t\tObject.defineProperty(this, 'isFont', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tvar _proto = Font.prototype;\n\n\t\t_proto.generateShapes = function generateShapes(text, size) {\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 100;\n\t\t\t}\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn Font;\n\t}();\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from ? Array.from(text) : String(text).split(''); // workaround for IE11, see #13988\n\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tfunction FontLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFontLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FontLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\t});\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tfunction AudioLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AudioLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\t});\n\n\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(skyColor);\n\t\tvar color2 = new Color().set(groundColor);\n\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\tvar c0 = Math.sqrt(Math.PI);\n\t\tvar c1 = c0 * Math.sqrt(0.75);\n\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: HemisphereLightProbe,\n\t\tisHemisphereLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying colors not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction AmbientLightProbe(color, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: AmbientLightProbe,\n\t\tisAmbientLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying color not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tfunction StereoCamera() {\n\t\tthis.type = 'StereoCamera';\n\t\tthis.aspect = 1;\n\t\tthis.eyeSep = 0.064;\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable(1);\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable(2);\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\t}\n\n\tObject.assign(StereoCamera.prototype, {\n\t\tupdate: function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\t});\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === void 0) {\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tif (fftSize === void 0) {\n\t\t\t\tfftSize = 2048;\n\t\t\t}\n\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch (typeName) {\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\t}\n\n\tObject.assign(PropertyMixer.prototype, {\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t},\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t},\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t},\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t},\n\t\t_setAdditiveIdentityNumeric: function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t},\n\t\t_setAdditiveIdentityQuaternion: function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t},\n\t\t_setAdditiveIdentityOther: function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t},\n\t\t// mix functions\n\t\t_select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_slerp: function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t},\n\t\t_slerpAdditive: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t},\n\t\t_lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t},\n\t\t_lerpAdditive: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tfunction AnimationObjectGroup() {\n\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\tindices[arguments[i].uuid] = i;\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\t\tthis.stats = {\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t},\n\n\t\t\t\tget inUse() {\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tget bindingsPerObject() {\n\t\t\t\treturn scope._bindings.length;\n\t\t\t}\n\n\t\t};\n\t}\n\n\tObject.assign(AnimationObjectGroup.prototype, {\n\t\tisAnimationObjectGroup: true,\n\t\tadd: function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\tremove: function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// remove & forget\n\t\tuncache: function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tif (_lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\tsubscribe_: function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t},\n\t\tunsubscribe_: function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\t});\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tif (localRoot === void 0) {\n\t\t\t\tlocalRoot = null;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = clip.blendMode;\n\t\t\t}\n\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tfunction AnimationMixer(root) {\n\t\tthis._root = root;\n\n\t\tthis._initMemoryManager();\n\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\t}\n\n\tAnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: AnimationMixer,\n\t\t_bindAction: function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t},\n\t\t_activateAction: function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t},\n\t\t_deactivateAction: function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t},\n\t\t// Memory manager\n\t\t_initMemoryManager: function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t// Memory management for AnimationAction objects\n\t\t_isActiveAction: function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t},\n\t\t_addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t},\n\t\t_removeInactiveAction: function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t},\n\t\t_removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_lendAction: function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t},\n\t\t_takeBackAction: function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t},\n\t\t// Memory management for PropertyMixer objects\n\t\t_addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t},\n\t\t_removeInactiveBinding: function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t},\n\t\t_lendBinding: function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t},\n\t\t_takeBackBinding: function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t},\n\t\t// Memory management of Interpolants for weight and time scale\n\t\t_lendControlInterpolant: function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t},\n\t\t_takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t},\n\t\t_controlInterpolantsResultBuffer: new Float32Array(1),\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t},\n\t\t// get an existing action\n\t\texistingAction: function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// advance the time and update apply the animation\n\t\tupdate: function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t},\n\t\t// return this mixer's root target object\n\t\tgetRoot: function getRoot() {\n\t\t\treturn this._root;\n\t\t},\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t},\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif (Array.isArray(objects) === false) {\n\t\t\t\tconsole.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n\t\t\t\treturn intersects;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tthis.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y !== undefined ? y : 0; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$8 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$8.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$8.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tthis.start = start !== undefined ? start : new Vector3();\n\t\t\tthis.end = end !== undefined ? end : new Vector3();\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$9);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 10;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 10;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 10;\n\t\t\t}\n\n\t\t\tif (radials === void 0) {\n\t\t\t\tradials = 16;\n\t\t\t}\n\n\t\t\tif (circles === void 0) {\n\t\t\t\tcircles = 8;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 64;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$c = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$c.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tif (hex === void 0) {\n\t\t\t\thex = 0xffff00;\n\t\t\t}\n\n\t\t\tvar color = hex;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this; // dir is assumed to be normalized\n\n\t\t\t_this.type = 'ArrowHelper';\n\t\t\tif (dir === undefined) dir = new Vector3(0, 0, 1);\n\t\t\tif (origin === undefined) origin = new Vector3(0, 0, 0);\n\t\t\tif (length === undefined) length = 1;\n\t\t\tif (color === undefined) color = 0xffff00;\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _floatView = new Float32Array(1);\n\n\tvar _int32View = new Int32Array(_floatView.buffer);\n\n\tvar DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tvar x = _int32View[0];\n\t\t\tvar bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tvar m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tvar e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\tvar backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tvar backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _clearColor = /*@__PURE__*/new Color();\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tfunction convertLinearToRGBE(color) {\n\t\tvar maxComponent = Math.max(color.r, color.g, color.b);\n\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tvar useSolidColor = false;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tvar alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\n\t\t\t\tvar _alpha = convertLinearToRGBE(backgroundMaterial.color);\n\n\t\t\t\tbackgroundMaterial.opacity = _alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction Face4(a, b, c, d, normal, color, materialIndex) {\n\t\tconsole.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n\t\treturn new Face3(a, b, c, normal, color, materialIndex);\n\t}\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === void 0) {\n\t\t\tmaterials = [];\n\t\t}\n\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tObject.assign(Path.prototype, {\n\t\tfromPoints: function fromPoints(points) {\n\t\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\t\treturn this.setFromPoints(points);\n\t\t}\n\t}); //\n\n\tfunction ClosedSplineCurve3(points) {\n\t\tconsole.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\t}\n\tClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction SplineCurve3(points) {\n\t\tconsole.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction Spline(points) {\n\t\tconsole.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSpline.prototype = Object.create(CatmullRomCurve3.prototype);\n\tObject.assign(Spline.prototype, {\n\t\tinitFromArray: function initFromArray()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .initFromArray() has been removed.');\n\t\t},\n\t\tgetControlPointsArray: function getControlPointsArray()\n\t\t/* optionalTarget */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .getControlPointsArray() has been removed.');\n\t\t},\n\t\treparametrizeByArcLength: function reparametrizeByArcLength()\n\t\t/* samplingCoef */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');\n\t\t}\n\t}); //\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tObject.assign(Loader.prototype, {\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\t\treturn LoaderUtils.extractUrlBase(url);\n\t\t}\n\t});\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tObject.assign(Box2.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Box3.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Sphere.prototype, {\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t}\n\t});\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t};\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tObject.assign(MathUtils, {\n\t\trandom16: function random16() {\n\t\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\t\treturn Math.random();\n\t\t},\n\t\tnearestPowerOfTwo: function nearestPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\t\treturn MathUtils.floorPowerOfTwo(value);\n\t\t},\n\t\tnextPowerOfTwo: function nextPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t\t}\n\t});\n\tObject.assign(Matrix3.prototype, {\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\t\treturn vector.applyMatrix3(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix3(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\tObject.assign(Matrix4.prototype, {\n\t\textractPosition: function extractPosition(m) {\n\t\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\t\treturn this.copyPosition(m);\n\t\t},\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tgetPosition: function getPosition() {\n\t\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\t\treturn this.makeRotationFromQuaternion(q);\n\t\t},\n\t\tmultiplyToArray: function multiplyToArray() {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector4: function multiplyVector4(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\trotateAxis: function rotateAxis(v) {\n\t\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\t\tv.transformDirection(this);\n\t\t},\n\t\tcrossVector: function crossVector(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\ttranslate: function translate() {\n\t\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t\t},\n\t\trotateX: function rotateX() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t\t},\n\t\trotateY: function rotateY() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t\t},\n\t\trotateZ: function rotateZ() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t\t},\n\t\trotateByAxis: function rotateByAxis() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix4(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tmakeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n\t\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t};\n\n\tObject.assign(Quaternion.prototype, {\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\t\treturn vector.applyQuaternion(this);\n\t\t},\n\t\tinverse: function inverse() {\n\t\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\t\treturn this.invert();\n\t\t}\n\t});\n\tObject.assign(Ray.prototype, {\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionPlane: function isIntersectionPlane(plane) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\t\treturn this.intersectsPlane(plane);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t}\n\t});\n\tObject.assign(Triangle.prototype, {\n\t\tarea: function area() {\n\t\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\t\treturn this.getArea();\n\t\t},\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn this.getBarycoord(point, target);\n\t\t},\n\t\tmidpoint: function midpoint(target) {\n\t\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\t\treturn this.getMidpoint(target);\n\t\t},\n\t\tnormal: function normal(target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn this.getNormal(target);\n\t\t},\n\t\tplane: function plane(target) {\n\t\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\t\treturn this.getPlane(target);\n\t\t}\n\t});\n\tObject.assign(Triangle, {\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t\t},\n\t\tnormal: function normal(a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn Triangle.getNormal(a, b, c, target);\n\t\t}\n\t});\n\tObject.assign(Shape.prototype, {\n\t\textractAllPoints: function extractAllPoints(divisions) {\n\t\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\t\treturn this.extractPoints(divisions);\n\t\t},\n\t\textrude: function extrude(options) {\n\t\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\t\treturn new ExtrudeGeometry(this, options);\n\t\t},\n\t\tmakeGeometry: function makeGeometry(options) {\n\t\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\t\treturn new ShapeGeometry(this, options);\n\t\t}\n\t});\n\tObject.assign(Vector2.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t\t},\n\t\tsetEulerFromQuaternion: function setEulerFromQuaternion() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t\t},\n\t\tgetPositionFromMatrix: function getPositionFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\t\treturn this.setFromMatrixPosition(m);\n\t\t},\n\t\tgetScaleFromMatrix: function getScaleFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\t\treturn this.setFromMatrixScale(m);\n\t\t},\n\t\tgetColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n\t\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\t\treturn this.setFromMatrixColumn(matrix, index);\n\t\t},\n\t\tapplyProjection: function applyProjection(m) {\n\t\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\t\treturn this.applyMatrix4(m);\n\t\t},\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector4.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t}); //\n\n\tObject.assign(Object3D.prototype, {\n\t\tgetChildByName: function getChildByName(name) {\n\t\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\t\treturn this.getObjectByName(name);\n\t\t},\n\t\trenderDepth: function renderDepth() {\n\t\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t\t},\n\t\ttranslate: function translate(distance, axis) {\n\t\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\t\treturn this.translateOnAxis(axis, distance);\n\t\t},\n\t\tgetWorldRotation: function getWorldRotation() {\n\t\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(Mesh.prototype, {\n\t\tsetDrawMode: function setDrawMode() {\n\t\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t}\n\t});\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tcopyIndicesArray: function copyIndicesArray()\n\t\t/* indices */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t});\n\tObject.assign(BufferGeometry.prototype, {\n\t\taddIndex: function addIndex(index) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\t\tthis.setIndex(index);\n\t\t},\n\t\taddAttribute: function addAttribute(name, attribute) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t\t}\n\n\t\t\tif (name === 'index') {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\t\tthis.setIndex(attribute);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.setAttribute(name, attribute);\n\t\t},\n\t\taddDrawCall: function addDrawCall(start, count, indexOffset) {\n\t\t\tif (indexOffset !== undefined) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t\t}\n\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\t\tthis.addGroup(start, count);\n\t\t},\n\t\tclearDrawCalls: function clearDrawCalls() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeOffsets: function computeOffsets() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t\t},\n\t\tremoveAttribute: function removeAttribute(name) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\t\treturn this.deleteAttribute(name);\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t}); //\n\n\tObject.assign(ExtrudeGeometry.prototype, {\n\t\tgetArrays: function getArrays() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t\t},\n\t\taddShapeList: function addShapeList() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t\t},\n\t\taddShape: function addShape() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.assign(Scene.prototype, {\n\t\tdispose: function dispose() {\n\t\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.assign(WebGLRenderer.prototype, {\n\t\tclearTarget: function clearTarget(renderTarget, color, depth, stencil) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\tthis.clear(color, depth, stencil);\n\t\t},\n\t\tanimate: function animate(callback) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\t\tthis.setAnimationLoop(callback);\n\t\t},\n\t\tgetCurrentRenderTarget: function getCurrentRenderTarget() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\t\treturn this.getRenderTarget();\n\t\t},\n\t\tgetMaxAnisotropy: function getMaxAnisotropy() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\t\t},\n\t\tgetPrecision: function getPrecision() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\t\treturn this.capabilities.precision;\n\t\t},\n\t\tresetGLState: function resetGLState() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\t\treturn this.state.reset();\n\t\t},\n\t\tsupportsFloatTextures: function supportsFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_float');\n\t\t},\n\t\tsupportsHalfFloatTextures: function supportsHalfFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_half_float');\n\t\t},\n\t\tsupportsStandardDerivatives: function supportsStandardDerivatives() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\t\treturn this.extensions.get('OES_standard_derivatives');\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t\t},\n\t\tsupportsBlendMinMax: function supportsBlendMinMax() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\t\treturn this.extensions.get('EXT_blend_minmax');\n\t\t},\n\t\tsupportsVertexTextures: function supportsVertexTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function supportsInstancedArrays() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t\t},\n\t\tenableScissorTest: function enableScissorTest(boolean) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\t\tthis.setScissorTest(boolean);\n\t\t},\n\t\tinitMaterial: function initMaterial() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t\t},\n\t\taddPrePlugin: function addPrePlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t\t},\n\t\taddPostPlugin: function addPostPlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t\t},\n\t\tupdateShadowMap: function updateShadowMap() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t\t},\n\t\tsetFaceCulling: function setFaceCulling() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t\t},\n\t\tallocTextureUnit: function allocTextureUnit() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t\t},\n\t\tsetTexture: function setTexture() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t\t},\n\t\tsetTexture2D: function setTexture2D() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t\t},\n\t\tsetTextureCube: function setTextureCube() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t\t},\n\t\tgetActiveMipMapLevel: function getActiveMipMapLevel() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\t\treturn this.getActiveMipmapLevel();\n\t\t}\n\t});\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t}; //\n\n\n\tvar GeometryUtils = {\n\t\tmerge: function merge(geometry1, geometry2, materialIndexOffset) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n\t\t\tvar matrix;\n\n\t\t\tif (geometry2.isMesh) {\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\t\t\t}\n\n\t\t\tgeometry1.merge(geometry2, matrix, materialIndexOffset);\n\t\t},\n\t\tcenter: function center(geometry) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n\t\t\treturn geometry.center();\n\t\t}\n\t};\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t// the target DOM element for key events\n\tthis._domElementKeyEvents = null;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t}\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","// Ensure ThreeJS is in global scope for the 'examples/'\nglobal.THREE = require(\"three\");\n\nrequire(\"three/examples/js/controls/OrbitControls\");\n\nconst canvasSketch = require(\"canvas-sketch\");\n\nconst settings = {\n  animate: true,\n  context: \"webgl\"\n};\n\nconst sketch = ({ context }) => {\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas\n  });\n\n  renderer.setClearColor(\"#000\", 1);\n\n  const camera = new THREE.PerspectiveCamera(50, 1, 0.01, 100);\n  camera.position.set(0, 0, -4);\n  camera.lookAt(new THREE.Vector3());\n\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  const scene = new THREE.Scene();\n\n  const geometry = new THREE.SphereGeometry(1, 32, 16);\n\n  const material2 = new THREE.MeshNormalMaterial({\n    //color: \"red\",\n    //wireframe: true\n  });\n  const material1 = new THREE.MeshNormalMaterial({\n    //color: \"red\",\n    flatShading: true\n    //wireframe: true\n  });\n\n  const loader = new THREE.TextureLoader();\n  const texture_moon = new loader.load(\"../moon.jpg\")\n\n  const texture = new loader.load(\"../earth.jpg\")\n  const material = new THREE.MeshStandardMaterial({\n    map:texture,\n    roughness:1,\n    metalness: 0\n  });\n\n  const material_moon = new THREE.MeshStandardMaterial({\n    map:texture_moon\n  });\n\n  // Setup a mesh with geometry + material\n  const mesh = new THREE.Mesh(geometry, material);\n  const mesh_moon = new THREE.Mesh(geometry, material_moon);\n\n  const group = new THREE.Group();\n  group.add(mesh_moon);\n\n  mesh_moon.position.set(1.2,0.8,0.5);\n  mesh_moon.scale.setScalar(0.15);\n  scene.add(mesh);\n  scene.add(group)\n\n\n  // drawing a light\n  const light = new THREE.PointLight(\"white\", 1.5);\n  light.position.set(2,2,-3)\n  scene.add(light)\n  // draw each frame\n\n\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time }) {\n      mesh.rotation.y = time * 0.1;\n      mesh_moon.rotation.y=time*0.05;\n      group.rotation.y = time * 0.5;\n      controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    }\n  };\n};\n\ncanvasSketch(sketch, settings);\n","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}